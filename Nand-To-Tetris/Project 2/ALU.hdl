/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
        //Zero X
        Mux16(a=true , b=false , sel=zx , out=ZeroX16 );
        And16(a=x , b=ZeroX16 , out=xPostZero );
        //Negate X
        Not16(in=xPostZero,out=xZeroNot);
        Mux16(a=xPostZero,b=xZeroNot,sel=nx,out=xp);
        //Zero Y
        Mux16(a=true , b=false , sel=zy , out=ZeroY16 );
        And16(a=y , b=ZeroY16 , out=yPostZero );
        //Negate Y
        Not16(in=yPostZero,out=yZeroNot);
        Mux16(a=yPostZero,b=yZeroNot,sel=ny,out=yp);

        //Sum
        Add16(a =xp , b =yp , out =xplusy );
        And16(a=xp , b=yp , out=xandy );
        Mux16(a=xandy , b=xplusy , sel=f , out=outp );

        Not16(in=outp , out=outnot );
        Mux16(a=outp,b=outnot,sel=no,out[0..7]=outLSB,out[8..14]=outMSB,out[15]=msb);
        Mux16(a[0..7]=outLSB, a[8..14]=outMSB, a[15]=msb, b=true, sel=false, out=out);


        Or8Way(in=outLSB , out=zeroLSB );
        Or8Way(in[0..6]=outMSB,in[7]=msb, out=zeroMSB );
        Or(a=zeroLSB , b=zeroMSB , out=zrp );
        Not(in=zrp , out=zr );

        And(a=msb , b=true , out=ng );

        
}
